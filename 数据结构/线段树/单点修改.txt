#include<cstdio>
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int MAXN=1e5+5;
int node[MAXN<<2];
int c[MAXN];
int build(int l,int r,int h){
    if(l>r)return 0;
    if(l==r){
        return node[h]=c[l];
    }
    int mid=(l+r)>>1;
    node[h]=max(build(l,mid,h<<1),build(mid+1,r,(h<<1)|1));
}
/*
int updatea(int l,int r,int o,int h,int val){
    if(l>o||r<o)return node[h];
    if(o==r&&l==o){
        return node[h]=val;

    }
    int mid=(l+r)>>1;
    return  node[h]=max(updatea(l,mid,o,h<<1,val),updatea(mid+1,r,o,(h<<1)|1,val));

}
*/
void updatea(int l,int r,int o,int h,int val){
    if(l>o||r<o)return;
    if(o==r&&l==o){
        node[h]=val;
        return;
    }
    int mid=(l+r)>>1;
    updatea(l,mid,o,h<<1,val);
    updatea(mid+1,r,o,(h<<1)|1,val);
    node[h]=max(node[h<<1],node[(h<<1)|1]);
    return;

}
int query(int l,int r,int ll,int rr,int h){
    if(l>rr||r<ll)return -0;
    if(l>=ll&&r<=rr){
        return node[h];
    }
    int mid=(l+r)>>1;
    if(rr<=mid)return query(l,mid,ll,rr,h<<1);
    else if(ll>mid) return query(mid+1,r,ll,rr,(h<<1)|1);
    else return max(query(l,mid,ll,rr,h<<1),query(mid+1,r,ll,rr,(h<<1)|1));
}