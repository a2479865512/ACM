#include <stdio.h>
#include <iostream>
#include <map>
#include <algorithm>
#include <cstring>
#include <stack>
#include <cmath>
#include <queue>
#include <vector>
#include <iterator>
#include <set>
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const long long MOD = 1e9 + 7;
const int MAXN = 1e5 + 5;
int n, m, x, y;
ll a[MAXN];
ll b[MAXN];
ll c[MAXN];
ll c2[MAXN];
int main() {
	int t;
	cin >> t;
	while (t--)
	{
		memset(a, 0, sizeof(a));
		memset(b, 0, sizeof(b));
		memset(c, 0, sizeof(c));
		memset(c2, 0, sizeof(c2));
		cin >> n >> m;
		while (m--)
		{
			cin >> x >> y;
			if (x == 1)
			{
				a[y]++;
				//a[n+1]--;
			}
			else if (x == 2)
			{
				b[y]++;
				//b[n+1]--;
			}
			else if (x == 3)
			{
				c[y + 1] += 2;
				c2[y]++;
			}
		}
		for (int i = 2; i <= n; i++)
		{
			a[i] = (a[i] + a[i - 1]) % MOD;
			b[i] = (b[i] + b[i - 1]) % MOD;
			c[i] = (c[i] + c[i - 1]) % MOD;
		}
		for (int i = 1; i <= n; i++)
		{
			b[i] = (b[i] + b[i - 1]) % MOD;
			c[i] = (c[i] + c[i - 1] + c2[i]) % MOD;
		}
		printf("%lld", (c[1] + a[1] + b[1]) % MOD);
		for (int i = 2; i <= n; i++)
		{
			c[i] = (c[i] + c[i - 1]) % MOD;
			printf(" %lld", (a[i] + b[i] + c[i]) % MOD);
		}
		printf("\n");
	}
	return 0;
}



4
10 1
1 1
10 1
2 2
10 1
3 3
10 3
1 1
2 2
3 3