#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int N = 20;
int n;
int val[N][N];
int dp[N][N][N][N];//dp[i][j][k][l],第一个人走到ij，第2个走到kl
int main()
{
	scanf("%d", &n);
	for (int i = 1; ; i++)
	{
		int x, y;
		cin >> x >> y;
		cin >> val[x][y];
		if (x == 0 && y == 0 && val[x][y] == 0)
			break;
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			for (int k = 1; k <= n; k++)
			{
				for (int l = 1; l <= n; l++)
				{
					dp[i][j][k][l] = max(max(dp[i - 1][j][k - 1][l], dp[i][j - 1][k][l - 1]), max(dp[i - 1][j][k][l - 1], dp[i][j - 1][k - 1][l])) + val[i][j];
					if (i != k || j != l)dp[i][j][k][l] += val[k][l];
				}
			}
		}
	}
	/*
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			for (int k = 1; k <= n; k++)
			{
				for (int l = 1; l <= n; l++)
				{
					dp[i][j][k][l] = max(max(dp[i - 1][j][k - 1][l], dp[i][j - 1][k][l - 1]), max(dp[i - 1][j][k][l - 1], dp[i][j - 1][k - 1][l])) + val[i][j] + val[k][l];
					if (i == k && j == l)dp[i][j][k][l] -= val[k][l];
				}
			}
		}
	}
	*/
	printf("%d\n", dp[n][n][n][n]);
	return 0;
}





8
2 3 13
2 6 6
3 5 7
4 4 14
5 2 21 
5 6 4
6 3 15
7 2 14
0 0 0