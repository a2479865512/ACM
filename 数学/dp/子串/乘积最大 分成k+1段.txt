
#include <iostream>
#include <cstdio>
#include <cmath>

using namespace std;

int N, K;
unsigned long long dp[41][31] = { 0 };      //这里是根据题目给的条件，确定的dp大小
string str;
int a[41] = { 0 };

void read()
{
	int i;
	scanf("%d%d", &N, &K);
	cin >> str;
	for (i = 0; i < str.length(); i++)
		a[i + 1] = str[i] - '0';
	for (i = 1; i <= str.length(); i++)
	{
		dp[i][0] = dp[i - 1][0] * 10 + a[i];       //对dp[i][0]的初始化，对于没有乘号的时候，只需要把相应的数字填在dp中即可
		//cout<<dp[i+1][0]<<endl;
	}
}

unsigned long long A(int j, int k)     //求出从j到k所构成的数字
{
	int i;
	double l = 10;
	unsigned long long s = 0;
	for (i = k; i >= j; i--)
		s += a[i] * pow(l, k - i);
	//cout<<s<<endl;
	return s;
}

void DP()                         //dp核心
{
	int i, j, k;
	for (i = 1; i <= K; i++)
		for (j = 1; j <= N; j++)
		{
			if (j < i + 1)
				continue;
			unsigned long long temp = 0;
			for (k = i; k < j; k++)
				temp = max(temp, dp[k][i - 1] * A(k + 1, j));
			dp[j][i] = temp;
			//cout<<dp[j][i]<<"::"<<i<<"  "<<k<<endl;
		}
}

void print()
{
	printf("%lld\n", dp[N][K]);
}

int main()
{
	read();
	DP();
	print();
	return 0;
}


4 2
1231’