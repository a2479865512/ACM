#include <stdio.h>
#include <iostream>
#include <map>
#include <algorithm>
#include <cstring>
#include <string>
#include <stack>
#include <cmath>
#include <queue>
#include <vector>
#include <iterator>
#include <set>
using namespace std;
#define ll long long
const double PI = acos(-1.0);
const double eps = 1e-8;
const int MAXN = 1e5 + 5;
const int INF = 0x3f3f3f3f;
const ll MOD = 1e9 + 7;
int h, w, ans;
int vis[1005][1005];
void dfs(int x, int y)
{
	if (x == h + 1 || y == w + 1 || x == 0 || y == 0)return;
	if (vis[x][y] != 0)return;
	else ans++;
	vis[x][y] = 2;
	dfs(x + 1, y);
	dfs(x - 1, y);
	dfs(x, y + 1);
	dfs(x, y - 1);
}
ll quickpow(ll a, ll b) {
	if (b < 0) return 0;
	ll ret = 1;
	a %= MOD;
	while (b) {
		if (b & 1) ret = (ret * a) % MOD;
		b >>= 1;
		a = (a * a) % MOD;
	}
	return ret % MOD;
}
int main()
{
	ios::sync_with_stdio(false);
	cin >> h >> w;
	int  a;
	int ans = 0;
	for (int i = 1; i <= h; i++)
	{
		cin >> a;
		for (int j = 1; j <= a; j++)vis[i][j] = 1;
		vis[i][a + 1] = -1;
	}
	int f = 1;
	for (int i = 1; i <= w; i++)
	{
		cin >> a;
		if (vis[a + 1][i] == 1)f = 0;
		if (f)
			for (int j = 1; j <= a; j++) {
				if (vis[j][i] == -1)
				{
					f = 0;
				}
				vis[j][i] = 1;
			}
		vis[a + 1][i] = 1;
	}
	if (!f) {
		cout << 0 << endl;
		return 0;
	}
	for (int i = 1; i <= h; i++)
		for (int j = 1; j <= w; j++)
			if (!vis[i][j])ans++;
	cout << quickpow(2, ans) << endl;
	return 0;

}


3 4
0 3 1
0 2 3 0


1 1
0
1


19 16
16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12
6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4
