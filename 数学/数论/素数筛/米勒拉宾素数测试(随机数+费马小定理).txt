#define ll long long
//快速乘法
long long quick_mul(long long a, long long b, long long m)
{
	long long ans = 0;
	while (b)
	{
		if (b & 1)
			ans = (ans + a) % m;
		a = (a + a) % m;
		b >>= 1;
	}
	return ans % m;
}
//快速幂
long long quick_pow(long long a, long long b, long long m)
{
	long long ans = 1;
	while (b)
	{
		if (b & 1)
			ans = quick_mul(ans, a, m);
		a = quick_mul(a, a, m);
		b >>= 1;
	}
	return ans % m;
}
bool Miller_Rabin(ll n, ll a) {    //米勒拉宾素数测试
	ll d = n - 1, s = 0;
	while (!(d & 1)) {     //求(2^s)*d中的s和d.
		d >>= 1;
		s++;
	}
	ll k = quick_pow(a, d, n);
	if (k == 1)return true;
	for (int j = 0; j < s; j++) {
		if (k == n - 1)return true;
		k = quick_mul(k, k, n);	//快乘
	}
	return false;
}

bool IsPrime(ll n) {
	ll a[4] = { 3,4,7,11 };
	for (int i = 0; i < 4; i++) {
		if (n == a[i])return true;
		if (!n%a[i])return false;
		if (n > a[i] && !Miller_Rabin(n, a[i]))return false;
	}
	return true;
}
bool solve(ll n) {
	if (n == 2)return 1;
	else if (n < 2 || !(n & 1))return 0;
	else if (IsPrime(n))return 1;
	else return 0;
}