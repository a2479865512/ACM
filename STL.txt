#include<vector>
vector<int> v;
vector<int> v1(v); //用另一个vector来初始化
vector<int> v2(n, i); //大小为n，并全部初始化为元素i
v.push_back(int); // 尾部插入数字
v.empty(); //判断是否为空，为空返回true,否则返回false;
v.resize(n + m); //调整vec的大小变为n+m
v.insert(v.begin(), 8);//在最前面插入新元素。
v.insert(v.begin() + 2, 1);//在2位置插入一个1
v.insert(v.end(), 3);//在向量末尾追加新元素
v.insert(v.end(), 4, 1);//在尾部插入4个1
vec.erase(v.begin() + 2);//删除第3个元素
v.erase(v.begin() + i, v.end() + j);//删除区间[i,j-1];
v.clear();　　　//清空之后，v.size()为０
v.reverse(vec.begin(), vec.end()); //使用reverse将元素翻转：需要头文件#include<algorithm>

#include<string>
string &substr(int pos = 0, int n = npos) const;//返回pos开始的n个字符组成的字符串
string &assign(const string &s, int start = 0, int n = len);//把字符串s中从start开始的n个字符赋给当前字符串
string &assign(const char *s, int n = len);//用c字符串s开始的n个字符赋值
string &append(const char *s, int n = len);//把c类型字符串s的前n个字符连接到当前字符串结尾
string &append(const string &s, int pos = 0, int n = len);//把字符串s中从pos开始的n个字符连接到当前字符串的结尾
int compare(const char *s) const;
int compare(int pos, int n, const char *s) const;
int compare(int pos, int n, const string &s, int pos2, int n2)const;//比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2个字符组成的字符串的大小
void swap(string &s2);    //交换当前字符串与s2的值
int find(const char *s, int pos = 0, int n = len) const;//从pos开始查找字符串s中前n个字符在当前串中的位置
int find(const string &s, int pos = 0) const;//从pos开始查找字符串s在当前串中的位置
//查找成功时返回所在位置，失败返回string::npos的值
int rfind(const char *s, int pos = 0, int n = len) const;
int rfind(const string &s, int pos = len) const;
//从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败时返回string::npos的值
int find_first_of(const char *s, int pos = 0, int n = len) const;
int find_first_of(const string &s, int pos = 0) const;
//从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos
int find_first_not_of(const char *s, int pos, int n) const;
int find_first_not_of(const string &s, int pos = 0) const;
//从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos
string &replace(int p0, int n0, const char *s, int n = len);//删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符
string &replace(int p0, int n0, const string &s, int pos, int n);//删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符
string &replace(int p0, int n0, int n, char c);//删除p0开始的n0个字符，然后在p0处插入n个字符c
string &insert(int p0, const string &s, int pos, int n);//前4个函数在p0位置插入字符串s中pos开始的前n个字符
string &insert(int p0, int n, char c);//此函数在p0处插入n个字符c
string &erase(int pos = 0, int n = len);//删除pos开始的n个字符，返回修改后的字符串
erase()函数可以:
删除pos指向的字符, 返回指向下一个字符的迭代器,
删除从start到end的所有字符, 返回一个迭代器, 指向被删除的最后一个字符的下一个位置
删除从index索引开始的num个字符, 返回*this.

#include<bitset>
bitset<MAXN> b; //  bt 包括 MAXN 位，下标 0 ~ MAXN - 1，默认初始化为 0
bitset<MAXN> b(0xf); //  0xf 表示十六进制数 f，对应二进制 1111，将 bt1 低 4 位初始化为 1
bitset<MAXN> b(012);//  012 表示八进制数 12，对应二进制 1010，即将 bt2 低 4 位初始化为 1010
bitset<MAXN> b("1010");//  将 bt3 低 4 位初始化为 1010
bitset<MAXN> b(sring, pos, len);  //将string类从pos开始的len个字符赋给b
b(s, pos, n);//  将 01 字符串 s 的 pos 位开始的 n 位初始化 bt4
bt.any();//  bt 中是否存在置为 1 的二进制位？
bt.none();//  bt 中不存在置为 1 的二进制位吗？
bt.count(); //  bt 中置为 1 的二进制位的个数
bt.size(); //  bt 中二进制位的个数
bt[pos];//  访问 bt 中在 pos 处的二进制位
bt.test(pos);//  bt 中在 pos 处的二进制位是否为 1
bt.set();//  把 bt 中所有二进制位都置为 1
bt.set(pos, val = 1); //  把 bt 中在 pos 处的二进制位置为 1
bt.reset(); //  把 bt 中所有二进制位都置为 0
bt.reset(pos);//  把 bt 中在pos处的二进制位置为0
bt.flip();//  把 bt 中所有二进制位逐位取反
bt.flip(pos);//  把 bt 中在 pos 处的二进制位取反
bt[pos].flip();//  同上
bt.to_ulong();//  用 bt 中同样的二进制位返回一个 unsigned long 值
bt.to_string();// 转化为string类
os << bt;//  把 bt 中的位集输出到 os 流

#include<queue> //priority_queue
q.size();//返回q里元素个数
q.empty();//返回q是否为空，空则返回1，否则返回0
q.push(k);//在q的末尾插入k
q.pop();//删掉q的第一个元素
q.top();//返回q的第一个元素
q.back();//返回q的末尾元素
priority_queue <int, vector<int>, greater<int> > q; //注意后面两个“>”不要写在一起，“>>”是右移运算符
priority_queue <int, vector<int>, less<int> >q; //less是从大到小，greater是从小到大

#include<pair>
pair<int, pair<pair> > p;
pair<int, double> p(1, 2.4);  /*用给定值初始化*/
pair<int, double> p(p2);  /*拷贝构造函数*/
pair <string, double> p = make_pair("aa", 5.0); //利用make_pair
p.first  p.second //访问




vector基本操作
(1).容量
向量大小： vec.size();
向量最大容量： vec.max_size();
更改向量大小： vec.resize();
向量真实大小： vec.capacity();
向量判空： vec.empty();
减少向量大小到满足元素所占存储空间的大小： vec.shrink_to_fit(); //shrink_to_fit
(2).修改
多个元素赋值： vec.assign(); //类似于初始化时用数组进行赋值
末尾添加元素： vec.push_back();
末尾删除元素： vec.pop_back();
任意位置插入元素： vec.insert();
任意位置删除元素： vec.erase();
交换两个向量的元素： vec.swap();
清空向量元素： vec.clear();
二分查找:
要先进行排序
upper_bound返回第一个大于的元素的下标；
int point[10] = { 1,3,7,7,9 };
int tmp = upper_bound(point, point + 5, 7) - point;
//按从小到大，7最多能插入数组point的哪个位置
tmp = lower_bound(point, point + 5, 7) - point;
//按从小到大，7最少能插入数组point的哪个位置
lower_bound返回第一个大于等于元素的下标；

优先队列 :
priority_queue<int, vector<int>, less<int> >q; 从大到小
priority_queue<int, vector<int>, great<int> >q; 从小到大
struct node
{
	int sx, sy, step;
	friend bool operator <(const node &s1, const node &s2)
	{
		return s1.step > s2.step; //小到大
	}
};

全排列:使用前必须是升序排列
int num[3] = { 1,2,3 };
do
{
	cout << num[0] << " " << num[1] << " " << num[2] << endl;
} while (next_permutation(num, num + 3));

atof()：将字符串转换为双精度浮点型值。
atoi()：将字符串转换为整型值。
atol()：将字符串转换为长整型值。
strtod()：将字符串转换为双精度浮点型值，并报告不能被转换的所有剩余数字。
strtol()：将字符串转换为长整值，并报告不能被转换的所有剩余数字。
strtoul()：将字符串转换为无符号长整型值，并报告不能被转换的所有剩余数字。

一、string截取、替换、查找子串函数

1. 截取子串
s.substr(pos, n)    截取s中从pos开始（包括0）的n个字符的子串，并返回
s.substr(pos)        截取s中从从pos开始（包括0）到末尾的所有字符的子串，并返回
2. 替换子串
s.replace(pos, n, s1)    用s1替换s中从pos开始（包括0）的n个字符的子串
3. 查找子串
s.find(s1)         查找s中第一次出现s1的位置，并返回（包括0）没有找到就返回 - 1
s.rfind(s1)        查找s中最后次出现s1的位置，并返回（包括0）没有找到就返回 - 1
s.substr(5, 6)                       从索引5开始6个字符
s.earse
erase(pos, n); 删除从pos开始的n个字符，比如erase(0, 1)就是删除第一个字符
erase(position); 删除position处的一个字符(position是个string类型的迭代器)
erase(first, last); 删除从first到last之间的字符（first和last都是迭代器）
transform(p.line.begin(), p.line.end(), p.lower.begin(), ::tolower)     转小写

双端队列 :
deque<int> d
deque(size_typen);//创建一个具有n个元素的deque对象，每个元素采用它的类型下的默认值
deque<int> d(10);//deque对象d有10个元素，每个元素初始值为0。
deque<double> d(10, 5);//创建一个具有n个元素的deque对象，这些元素的初始值为value。
1)void pop_front();//删除deque的第一个元素
2)void pop_back();//删除deque的最后一个元素
3)iterator erase(iteratorpos); //删除pos所指向的元素
4)iterator erase(iterator first, iterator last);//删除迭代区间[first,last)所指向的所有元素
5)void clear();//删除所有元素
使用push_back()方法从尾部插入元素，会不断扩张队列。
使用push_front()从头部插入元素，不会增加新元素，只将原来有的元素覆盖。
resize返回deque容器的大小

set
count判断元素是否存在 不存在返回0
strcat函数
char d[20] = "GoldenGlobal";
char* s = "View";
clrscr();
strcat(d, s);
strcmp函数
设这两个字符串为str1，str2，
若str1 == str2，则返回零；
若str1<str2，则返回负数；
若str1>str2，则返回正数。
strcpy函数 strcpy(s1, s2);

list
list<int> a;
a.push_back(1);
调用resize(n)将list的长度改为只容纳n个元素，超出的元素将被删除。
如果n比list原来的长度长，那么默认超出的部分元素置为0。
也可以用resize(n, m)的方式将超出的部分赋值为m。
使用list的成员函数push_back和push_front插入一个元素到list中。
其中push_back()是从list的末端插入，而push_front()是从list的头部插入。
通过front()可以获得list容器中的头部元素，通过back()可以获得list容器的最后一个元素。
使用pop_back()可以删掉尾部第一个元素，pop_front()可以删掉头部第一个元素。
swap(a, b);//交换两个链表
reverse(b.begin(), b.end());//逆置
a.splice(a.begin(), b);//把b合并到a上
a.merge(b)//merge合并是会自动排序的、调用结束后b变为空，a中元素包含原来a和b的元素。
a.insert(a.begin(), 100);  //在a的开始位置（即头部）插入100
a.erase(a.begin());  //将a的第一个元素删除
a.remove(7);//删除a中值为7的元素



advance
