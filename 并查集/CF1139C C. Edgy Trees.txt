#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

const int MAXN = 1e5 + 5;
//const int INF = 0x3f3f3f3f;
struct MyStruct
{
	int fa;
	long long s;
}a[MAXN];
//快速乘法
long long quick_mul(long long a, long long b, long long m)
{
	long long ans = 0;
	while (b)
	{
		if (b & 1)
			ans = (ans + a) % m;
		a = (a + a) % m;
		b >>= 1;
	}
	return ans;
}
//快速幂
long long quick_pow(long long a, long long b, long long m)
{
	long long ans = 1;
	while (b)
	{
		if (b & 1)
			ans = quick_mul(ans, a, m);
		a = quick_mul(a, a, m);
		b >>= 1;
	}
	return ans;
}

int findfa(int h)
{
	if (h != a[h].fa)
		return a[h].fa = findfa(a[h].fa);
	return h;
}
int n, u, v, w;
long long s;
long long k;
int main() {
	scanf("%d %lld", &n, &k);
	//int m=n;
	for (int i = 1; i <= n; i++) {
		a[i].fa = i;
		a[i].s = 1;
	}
	for (int i = 0; i < n; ++i) {
		scanf("%d %d %d", &u, &v, &w);
		if (w == 0) {
			int q = findfa(u);
			int p = findfa(v);
			if (q != p) {
				a[q].fa = p;
				a[p].s += a[q].s;
			}
		}
	}
	s = quick_pow(n, k, 1000000007);
	for (int i = 1; i <= n; i++) {
		if (a[i].fa == i)
		{
			s = (s - quick_pow(a[i].s, k, 1000000007)) % 1000000007;
		}
	}
	if (s < 0)s = s + 1000000007;
	printf("%lld\n", s);
	return 0;
}

4 4
1 2 1
2 3 1
3 4 1

4 6
1 2 0
1 3 0
1 4 0


3 5
1 2 1
2 3 0