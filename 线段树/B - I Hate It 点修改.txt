#include"stdio.h"
#define MID (node[h].lson + node[h].rson) >> 1
int max(int a,int b)
{if(a>b)return a;
else return b;
}
struct Node
{
    int lson , rson ;
    int val ;
}node[800000];
int num[200000];
int Build (int l , int r , int h)
{
    node[h].lson = l ;
    node[h].rson = r ;
    if (l == r)
    {
        return node[h].val = num[l] ;
    }
    else
    {
        int mid = (l + r) >> 1 ;
        return node[h].val = max(Build (l , mid , h << 1) , Build (mid + 1 , r , h << 1 | 1)) ;
    }
}
int chear (int l , int r , int h)
{
    node[h].lson = l ;
    node[h].rson = r ;
    if (l == r)
    {
        return node[h].val = 0 ;
    }
    else
    {
        int mid = (l + r) >> 1 ;
        return node[h].val = Build (l , mid , h << 1) + Build (mid + 1 , r , h << 1 | 1) ;
    }
}

void Update(int k , int val , int h)
{    node[h].val=max(val,node[h].val);
    if (node[h].lson == node[h].rson)
	{
        return ;
    }
    else
    {
        int mid = MID ;
        if (k <= mid)
            Update(k , val , h << 1) ;
        else
            Update(k , val , h << 1 | 1 ) ;
    }
}

int Query(int l , int r , int h)
{
    if (node[h].lson == l && node[h].rson == r)
    {
        return node[h].val ;
    }
    else
    {
        int mid = MID ;
        if (r <= mid)
        {
            return Query(l , r , h << 1 ) ;
        }
        else if ( l > mid )
        {
            return Query(l , r , h << 1 | 1 ) ;
        }
        else
            return max( Query (l , mid , h << 1) , Query(mid + 1 , r , h << 1 | 1) );
    }
}
int main()
{int n,m,a,b;
char c;
while(~scanf("%d %d",&n,&m))
	{for(int i=1;i<=n;i++)
		{scanf("%d",num+i);
		}
		chear(1,n,1);
		Build(1,n,1);
		for(int i=0;i<m;i++)
		{getchar();
		 scanf("%c",&c);
		 scanf("%d %d",&a,&b);
		if(c=='Q')
			printf("%d\n",Query(a,b,1));
		else Update(a,b,1);
		}
	}
	return 0;
}



5 6
1 2 3 4 5
Q 1 5
U 3 6
Q 3 4
Q 4 5
U 2 9
Q 1 5