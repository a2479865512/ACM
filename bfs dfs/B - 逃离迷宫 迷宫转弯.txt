#include <iostream>
#include <queue>
#include <cstring>
using namespace std;
int n, m;
const int AX = 300;
char a[AX][AX];
struct  Node
{
	int x;
	int y;
	int k;
}pos, q;
int vis[110][110];
int dir[4][2] = { {0,1},{1,0},{0,-1},{-1,0} };
int bfs(int x1, int y1, int x2, int y2, int sum) {
	queue<Node>que;
	pos.k = -1;
	pos.x = x1;
	pos.y = y1;
	vis[pos.x][pos.y] = 1;
	que.push(pos);
	while (!que.empty())
	{
		pos = que.front();
		if (pos.k == sum)break;
		que.pop();
		for (int i = 0; i < 4; i++)
		{
			q.x = pos.x + dir[i][0];
			q.y = pos.y + dir[i][1];
			q.k = pos.k + 1;
			while (a[q.x][q.y] == '.')
			{
				if (q.x == x2 && q.y == y2) return 1;
				if (vis[q.x][q.y] == 0)
				{
					vis[q.x][q.y] = 1;
					que.push(q);
				}
				q.x += dir[i][0];
				q.y += dir[i][1];
			}
		}
	}
	return 0;
}
int main() {
	int T;
	cin >> T;
	while (T--) {
		memset(a, 0, sizeof(a));
		memset(vis, 0, sizeof(vis));
		cin >> m >> n;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				cin >> a[i][j];
			}
		}
		int x1, y1, x2, y2;
		int sun;
		cin >> sun >> y1 >> x1 >> y2 >> x2;
		y1--;
		x1--;
		y2--;
		x2--;
		if (bfs(x1, y1, x2, y2, sun)) {
			cout << "yes" << endl;
		}
		else {
			cout << "no" << endl;
		}
	}
	return 0;
}


2
5 5
...**
*.**.
.....
.....
*....
1 1 1 1 3
5 5
...**
*.**.
.....
.....
*....
2 1 1 1 3