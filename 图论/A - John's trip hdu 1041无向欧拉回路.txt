#include <iostream>
#include <cstdio>
#include <vector>
#include<cstring>
#include<algorithm>
using namespace std;
#define pb push_back
const int MAXN = 2e3 + 5;



struct Edge {
    int u, v, t;
    bool operator<(const Edge &a)const
	{
		return (t<a.t);
	 }

}edge[MAXN];
int id[MAXN];
int vis[MAXN];
int ans[MAXN];
int top = 0;
int t=0,k=0;
int  huilu()
{
    for(int i=1;i<=t;i++)
        if(id[i]%2!=0)
        {
            return 1;
        }
    return 0;

}
void dfs(int x) {
    for(int i = 1; i <=t; i++) {
        if(!vis[i]&&edge[i].v==x)
        {
            vis[i] = 1;
            dfs(edge[i].u);
            ans[++top] = edge[i].t;
        }
        else if(!vis[i]&&edge[i].u==x)
        {
            vis[i] = 1;
            dfs(edge[i].v);
            ans[++top] = edge[i].t;
        }
    }
}

int main(){
  int x,y,z;

    while(~scanf("%d %d",&x,&y)&&x&&y){
        scanf("%d",&z);
        id[x]++;id[y]++;
        edge[++t]={x,y,z};
        while(~scanf("%d %d",&x,&y)&&x&&y){
            scanf("%d",&z);
            id[x]++;id[y]++;
            edge[++t]={x,y,z};
        }
        if(huilu())
        {
            printf("Round trip does not exist.\n");
        }
        else
        {
            sort(edge+1,edge+t+1);
            dfs(1);
            //cout<<top<<endl;
            for(int i = top; i > 0; i--)
                //cout << ans[i] << endl;
                printf("%d ",ans[i]);
            printf("\n");
        }
        memset(vis,0,sizeof(vis));
        memset(id,0,sizeof(id));
        t=0;
        top=0;
    }
    return 0;
}



1 2 1
2 3 2
3 1 6
1 2 5
2 3 3
3 1 4
0 0
1 2 1
2 3 2
1 3 3
2 4 4
0 0
0 0