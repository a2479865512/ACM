#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

const int MAXN = 1e6 + 5;
const int INF = 0x3f3f3f3f;

struct Edge {
    int u, v, w;
};

int n, m;
int cnt[MAXN];
int dis[MAXN];
int vis[MAXN];

vector <Edge > edge[MAXN];

queue <int > q;

int Bellman_ford(int s) {
    while(!q.empty()) q.pop();
    memset (vis, 0, sizeof(vis));
    memset (cnt, 0, sizeof(cnt));
    for(int i = 0; i <= n; i++) dis[i] = INF;
    dis[s] = 0;
    vis[s] = 1;
    q.push(s);
    while(!q.empty()) {
        int u = q.front();
        q.pop();
        vis[u] = 0;
        int len = edge[u].size();
        for(int i = 0; i < len; i++) {
            Edge & e = edge[u][i];
            if(dis[u] < INF && dis[e.v] > dis[u] + e.w) {
                dis[e.v] = dis[u] + e.w;
                if(!vis[e.v]) {
                    q.push(e.v);
                    vis[e.v] = 1;
                    if(++cnt[e.v] > n) return 0;
                }
            }
        }
    }
    return 1;
}
int main(){
    int t;
    cin>>t>>n;
    while(t--){
        int a,b,y;
            cin>>a>>b>>y;
                edge[a].push_back(Edge{a,b,y});
                edge[b].push_back(Edge{b,a,y});


    }
    Bellman_ford(1);
   cout<<dis[n]<<endl;
}




5 5
1 2 20
2 3 30
3 4 20
4 5 20
1 5 100
