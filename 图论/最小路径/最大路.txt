#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
const int MAXN = 1e6 + 5;
const int INF = 0x3f3f3f3f;
struct Edge {
	int u, v, w;
};
int n, m;
int dis[MAXN];
int vis[MAXN];
vector <Edge > edge;
bool Bellman_ford(int s, int n)
{
	for (int i = 0; i < n; i++) dis[i] = INF;
	dis[s] = 0;
	for (int k = 1; k < n; k++) //更新n-1次
		for (int i = 0; i < edge.size(); i++)
		{
			int u = edge[i].u;
			int v = edge[i].v;
			int w = edge[i].w;
			dis[v] = min(dis[v], dis[u] + w);
		}
	for (int i = 0; i < edge.size(); i++) {  //判断有无负环
		int u = edge[i].u;
		int v = edge[i].v;
		int w = edge[i].w;
		if (dis[v] > dis[u] + w) return true;
	}
	return false;
}
int main() {
	cin >> n >> m;
	while (m--) {
		int a, b, y;
		cin >> a >> b >> y;
		edge.push_back(Edge{ a,b,-y });
	}
	Bellman_ford(1, n);
	cout << -dis[n] << endl;
}
