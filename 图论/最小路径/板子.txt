struct edge
{
	int to, dis, next;
};

edge e[MAXN << 4];
int head[MAXN], dis[MAXN], cnt;
bool vis[MAXN];
int n, m;

inline void add_edge(int u, int v, int d)
{
	cnt++;
	e[cnt].dis = d;
	e[cnt].to = v;
	e[cnt].next = head[u];
	head[u] = cnt;
}

struct node
{
	int dis;
	int pos;
	bool operator <(const node &x)const
	{
		return x.dis < dis;
	}
};

std::priority_queue<node> q;
inline void dijkstra(int s, int sum)
{
	while (!q.empty())q.pop();
	memset(vis, 0, sizeof(vis));
	for (int i = 1; i <= sum; ++i)dis[i] = INF;
	dis[s] = 0;
	q.push((node) { 0, s });
	while (!q.empty())
	{
		node tmp = q.top();
		q.pop();
		//cout<<tmp.pos<<endl;
		int x = tmp.pos, d = tmp.dis;
		if (vis[x])
			continue;
		vis[x] = 1;
		for (int i = head[x]; i; i = e[i].next)
		{
			int y = e[i].to;
			if (dis[y] > dis[x] + e[i].dis)
			{
				dis[y] = dis[x] + e[i].dis;
				if (!vis[y])
				{
					q.push((node) { dis[y], y });
				}
			}
		}
	}
}