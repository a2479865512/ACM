#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
const int MAXN = 1e3 + 5;
const int INF = 0x3f3f3f3f;
int e[MAXN][MAXN];
int n, m;
int dis[MAXN];
int vis[MAXN];
queue <int > q;
void spfa(int x) {
	while (!q.empty()) {
		q.pop();
	}
	memset(vis, 0, sizeof(vis));
	memset(dis, 0, sizeof(dis));
	vis[x] = 1, dis[x] = INF;
	q.push(x);
	while (!q.empty()) {
		int u = q.front();
		q.pop();
		vis[u] = 0;
		for (int i = 1; i <= n; i++) {
			if (min(dis[u], e[u][i]) > dis[i]) {
				dis[i] = min(dis[u], e[u][i]);
				if (!vis[i]) {
					vis[i] = 1;
					q.push(i);
				}
			}
		}
	}
}
int main()
{
	int k, x, y, w;
	scanf("%d", &k);
	for (int i = 1; i <= k; i++)
	{
		memset(e, 0, sizeof(e));
		printf("Scenario #%d:\n", i);
		scanf("%d %d", &n, &m);
		for (int j = 0; j < m; j++)
		{
			scanf("%d %d %d", &x, &y, &w);
			e[y][x] = e[x][y] = w;
		}
		spfa(1);
		printf("%d\n\n", dis[n]);
	}
	return 0;
}


1
3 3
1 2 3
1 3 4
2 3 5

#include <iostream>
#include <algorithm>
#include <cstdio>
#include <cstring>
using namespace std;

/*求路径的最小值中的最大值*/
const int INF = 0x3f3f3f3f;
const int MAXN = 1010;
bool vis[MAXN];

void Dijkstra(int cost[][MAXN], int lowcost[], int n, int beg)
{
	for (int i = 1; i <= n; i++)
	{
		lowcost[i] = 0;
		vis[i] = false;
	}
	lowcost[beg] = INF;
	for (int j = 0; j < n; j++)
	{
		int k = -1;
		int MAX = 0;
		for (int i = 1; i <= n; i++)
		{
			if (!vis[i] && lowcost[i] > MAX)
			{
				MAX = lowcost[i];
				k = i;
			}
		}
		if (k == -1) break;
		vis[k] = true;
		for (int i = 1; i <= n; i++)
		{
			if (!vis[i] && min(lowcost[k], cost[k][i]) > lowcost[i])
			{
				lowcost[i] = min(lowcost[k], cost[k][i]);
			}
		}
	}
}

int cost[MAXN][MAXN];
int lowcost[MAXN];

int main()
{
	int T;
	int n, m;
	scanf("%d", &T);
	int iCase = 0;
	while (T--)
	{
		iCase++;
		scanf("%d%d", &n, &m);
		memset(cost, 0, sizeof(cost));
		int u, v, w;
		while (m--)
		{
			scanf("%d%d%d", &u, &v, &w);
			if (w > cost[u][v])
			{
				cost[u][v] = cost[v][u] = w;
			}
		}
		Dijkstra(cost, lowcost, n, 1);
		printf("Scenario #%d:\n", iCase);
		printf("%d\n\n", lowcost[n]);
	}
	return 0;
}
