//¨f§¾¨h§ñ§ã§Ö  n*logm

#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;
typedef long long ll;
const int MAXN = 1e5 + 5;
const ll INF = 0x3f3f3f3f3f3f3f3f;

struct Node {
	ll d, pos;
	bool operator < (const Node & rhs) const {
		return d > rhs.d;
	}
};

struct Edge {
	ll u, v, w;
};

int n, m;

ll dis[2][MAXN << 1];
int vis[MAXN << 1];
ll ans[MAXN << 1];
vector <Edge > edge[2][MAXN << 1];

priority_queue <Node > q;

void Dijstra(int s, int k) {
	while (!q.empty()) q.pop();
	memset(vis, 0, sizeof(vis));
	for (int i = 1; i <= n; i++) dis[k][i] = INF;
	dis[k][s] = 0;
	q.push(Node{ 0,s });
	while (!q.empty()) {
		Node t = q.top();
		q.pop();
		int u = t.pos;
		if (vis[u]) continue;
		vis[u] = 1;
		int len = edge[k][u].size();
		for (int i = 0; i < len; i++) {
			Edge &e = edge[k][u][i];
			if (dis[k][e.v] > dis[k][u] + e.w) {
				dis[k][e.v] = dis[k][u] + e.w;
				q.push(Node{ dis[k][e.v], e.v });
			}
		}
	}

}
int main() {
	int t;
	ios::sync_with_stdio(false);
	cin >> n >> t;
	while (t--) {
		ll a, b, y, y2;
		cin >> a >> b >> y >> y2;
		edge[0][a].push_back(Edge{ a,b,y });
		edge[0][b].push_back(Edge{ b,a,y });
		edge[1][a].push_back(Edge{ a,b,y2 });
		edge[1][b].push_back(Edge{ b,a,y2 });
	}
	int s, tt;
	cin >> s >> tt;
	Dijstra(s, 0);
	Dijstra(tt, 1);
	for (int i = 0; i <= n + 1; i++)ans[i] = INF;
	for (int i = n; i >= 1; i--)
	{
		ans[i] = min(ans[i + 1], dis[0][i] + dis[1][i]);
	}
	for (int i = 1; i <= n; i++)cout << ans[i] << endl;

}


4 3
1 4 1 30
1 2 1 10
1 3 20 1
2 3


1
1
1
51
