#include<iostream>
#include<queue>
using namespace std;
const int INF=10000;
const int MAX=70;
int A,B,C,T;
struct node
{
    int x;
    int y;
    int z;
    int time;
};
queue<node> Q;
int dir[6][3]={{0,0,1},{0,0,-1},{0,1,0},{0,-1,0},{1,0,0},{-1,0,0}};
int map[MAX][MAX][MAX];
int mintime[MAX][MAX][MAX];
int BFS(node s)
{
    int i;
    Q.push(s);
    node hd;
    while(!Q.empty())
    {
        hd=Q.front();
        Q.pop();
        for(i=0;i<6;i++)
        {
            int x=hd.x+dir[i][0];
            int y=hd.y+dir[i][1];
            int z=hd.z+dir[i][2];
            if(x>=0&&x<=A-1&&y>=0&&y<=B-1&&z>=0&&z<=C-1&&map[x][y][z]!=1)
            {
                node t;
                t.x=x;
                t.y=y;
                t.z=z;
                t.time=hd.time+1;
                if(t.time<mintime[x][y][z])
                {
                    mintime[x][y][z]=t.time;
                    Q.push(t);
                }
            }
        }
    }
    return mintime[A-1][B-1][C-1];  
}
int main()
{
    int c;
    node start;
    scanf("%d",&c);
    while(c--)
    {
        scanf("%d%d%d%d",&A,&B,&C,&T);
        for(int i=0;i<A;i++)
        for(int j=0;j<B;j++)
        for(int k=0;k<C;k++)
        {
            scanf("%d",&map[i][j][k]);
            mintime[i][j][k]=INF;
        }
        start.x=start.y=start.z=start.time=0;
        mintime[0][0][0]=0;
        int mint=BFS(start);
        if(mint<=T)
        printf("%d\n",mint);
        else
        printf("-1\n");
    }
    return 0;
}





1
3 3 4 20
0 1 1 1
0 0 1 1
0 1 1 1
1 1 1 1
1 0 0 1
0 1 1 1
0 0 0 0
0 1 1 0
0 1 1 0