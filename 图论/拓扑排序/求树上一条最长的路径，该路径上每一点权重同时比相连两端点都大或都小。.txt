/*******************
求树上一条最长的路径，该路径上每一点权重同时比相连两端点都大或都小。
输入：
第一行n代表n个节点2<=n<=1e5;
第二行n-1个数，第i个数代表第i+1号节点的父亲
第三行n个数，每个数代表第i个节点的权重
********************/
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1e5 + 5;
int head[MAXN], to[MAXN], next[MAXN];
int w[MAXN], id[MAXN];
int dp[MAXN][2];//0down 1up,到i节点上升或下降最长的路径数
int cnt = 0, ans = 0, n;
queue<int >q;
void adde(int u, int v) {
	to[cnt] = v;
	next[cnt] = head[u];
	head[u] = cnt++;
}
int main() {
	memset(head, -1, sizeof(head));
	cin >> n;
	int x;
	for (int i = 2; i <= n; ++i) {
		cin >> x;
		adde(i, x);
		adde(x, i);
		++id[i];
		++id[x];
	}
	x = n - 1;
	for (int i = 1; i <= n; ++i) {
		cin >> w[i];
		if (x&&id[i] == 1) {
			q.push(i);
			--x;
			id[i] = 0;
		}
	}
	//拓扑排序+树状dp
	while (!q.empty()) {
		int u = q.front();
		q.pop();
		for (int i = head[u]; ~i; i = next[i]) {
			int v = to[i];
			if (!id[v])continue;
			--id[v];
			if (x&&id[v] == 1) {
				q.push(v);
				--x;
				id[v] = 0;
			}
			/*
			cout << "s" << endl;
			cout << u << ' ' << v << ' ' << ans << endl;
			cout << dp[u][0] << dp[v][0] << endl;
			cout << dp[u][1] << dp[v][1] << endl;
			*/
			//写题的时候还是紧张了，01给错了
			if (w[u] < w[v]) {
				ans = max(ans, dp[v][1] + dp[u][0] + 1);
				dp[v][1] = max(dp[v][1], dp[u][0] + 1);
			}
			else if (w[u] > w[v]) {
				ans = max(ans, dp[v][0] + dp[u][1] + 1);
				dp[v][0] = max(dp[v][0], dp[u][1] + 1);
			}
			else {
				ans = max(max(max(max(ans, dp[u][0]), dp[v][0]), dp[u][1]), dp[v][1]);
			}
			/*
			cout << u << ' ' << v << ' ' << ans << endl;
			cout << dp[u][0] << dp[v][0] << endl;
			cout << dp[u][1] << dp[v][1] << endl << endl;
			*/

		}
	}
	cout << ans << endl;
	return 0;
}
/*
5
1 2 3 4
1 2 3 4 5
ans=1
5
1 2 3 4
2 2 1 2 2
ans=2
5
1 2 3 4
2 2 1 1 1
ans=1
3
1 1
3 2 1
ans=2
7
1 2 3 2 2 6
2 3 3 1 6 1 4
ans=3
*/


