#include <cstdio>
#include <iostream>
#include <map>
#include <algorithm>
#include <cstring>
#include <stack>
#include <cmath>
#include <queue>
#include <vector>
#include <iterator>
#include <string>
#include <set>
#include <time.h>
using namespace std;
typedef long long ll;
const int MAXN = 1e5 + 5;
const int INF = 0x3f3f3f3f;
int head[MAXN];
struct Edge {
	int v, w, next;
}edge[MAXN];
int n, m, tot = 0;
void add(int a, int b, int w)
{
	edge[tot].v = b; edge[tot].w = w;
	edge[tot].next = head[a];
	head[a] = tot++;
	edge[tot].v = a; edge[tot].w = w;
	edge[tot].next = head[b];
	head[b] = tot++;
}
struct Dis {
	int v, w;
	bool operator <(const Dis&A)const
	{
		return w > A.w;
	}
};
bool vis[MAXN];
int sum = 0;
priority_queue<Dis>q;
bool prim()
{
	memset(vis, 0, sizeof(vis));
	sum = 0;
	for (int i = head[1]; ~i; i = edge[i].next)
	{
		int v = edge[i].v;
		q.push(Dis{ v,edge[i].w });
	}
	int cnt = n - 1;
	vis[1] = 1;
	while (!q.empty()) {
		Dis x = q.top();
		q.pop();
		if (!vis[x.v]) {
			sum += x.w;
			vis[x.v] = 1;
			cnt--;
			if (!cnt) {
				return 1;
			}
			for (int i = head[x.v]; ~i; i = edge[i].next)
			{
				int v = edge[i].v;
				if (vis[v])continue;
				q.push(Dis{ v,edge[i].w });
			}
		}
	}
	return 0;
}
int main()
{
	ios::sync_with_stdio(false);
	int t;
	cin >> t;
	while (t--) {
		cin >> n >> m;
		memset(head, -1, sizeof(head));
		tot = 0;
		while (q.empty())q.pop();
		for (int i = 0; i < m; i++)
		{
			int a, b, c;
			cin >> a >> b >> c;
			add(a, b, c);
		}
		if (!prim())printf("No\n");
		else  printf("%d\n", sum);
	}
	return 0;
}
