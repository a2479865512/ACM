#include<bits/stdc++.h>
using namespace std;
vector<int >edge[201];
int n, m, x, y, f = 1, s = 0, vis[201], r[201];
bool found(int u)
{
	for (int i = edge[u].size() - 1; i >= 0; i--)
	{
		int v = edge[u][i];
		if (!vis[v])
		{
			vis[v] = 1;
			if (r[v] == 0 || found(r[v]))
			{
				r[v] = u;
				return 1;
			}
		}
	}
	return 0;
}
int dfs(int u)
{
	if (!f)return f;
	for (int i = edge[u].size() - 1; i >= 0; i--)
	{
		int v = edge[u][i];
		if (vis[v] == -1) {
			vis[v] = 1 - vis[u];
			dfs(v);
		}
		else if (vis[v] == vis[u])
		{
			f = 0;
			return f;
		}
	}
	return f;
}
int main()
{
	while (cin >> n >> m)
	{
		s = 0;
		f = 1;
		while (m--)
		{
			cin >> x >> y;
			edge[x].push_back(y);
		}
		memset(vis, -1, sizeof(vis));
		vis[1] = 0;
		if (dfs(1)) {
			memset(r, 0, sizeof(r));
			for (int i = 1; i <= n; i++)
			{
				memset(vis, 0, sizeof(vis));
				if (found(i))s++;
			}
			cout << s << endl;
		}
		else printf("No\n");
		for (int i = 1; i <= n; i++)
			edge[i].clear();
	}
	return 0;
}



4 4
1 2
1 3
1 4
2 3
6 5
1 2
1 3
1 4
2 5
3 6