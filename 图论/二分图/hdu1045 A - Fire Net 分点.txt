#include<cstdio>
#include<cstring>
#include<iostream>
#include<queue>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;
const int MAXN = 35;
int line[MAXN][MAXN];//二分连线
int r[MAXN][MAXN], vis[MAXN], l[MAXN][MAXN];
int k[MAXN];
int  n;
char mp[4][4];
int s = 0;
bool found(int x)
{
	for (int i = 1; i <= n; i++)
	{
		if (line[x][i] && !vis[i])
		{
			vis[i] = 1;
			if (k[i] == 0 || found(k[i]))
			{
				k[i] = x;
				return 1;
			}
		}
	}
	return 0;
}
int main()
{
	int x;
	while (cin >> x && x) {
		for (int i = 0; i < x; i++)
			for (int j = 0; j < x; j++)
				cin >> mp[i][j];
		for (int i = 0; i < x; i++)
			n = 1;
		memset(l, 0, sizeof(l));
		memset(r, 0, sizeof(r));
		memset(k, 0, sizeof(k));
		memset(line, 0, sizeof(line));
		for (int i = 0; i < x; i++) {
			for (int j = 0; j < x; j++) {
				if (mp[i][j] == '.')
				{
					l[i][j] = n;
				}
				else n++;
			}
			n++;
			for (int j = 0; j < x; j++) {
				if (mp[j][i] == '.')
				{
					r[j][i] = n;
				}
				else n++;
			}
			n++;
		}
		for (int i = 0; i < x; i++)
			for (int j = 0; j < x; j++)
				if (mp[i][j] == '.') {
					line[l[i][j]][r[i][j]] = 1;
				}
		s = 0;
		for (int i = 1; i <= n; i++)
		{
			memset(vis, 0, sizeof(vis));
			if (found(i)) s++;
		}
		printf("%d\n", s);
	}
	return 0;
}


4
.X..
....
XX..
....
2
XX
.X
3
.X.
X.X
.X.
3
...
.XX
.XX
4
....
....
....
....
0